import java.util.NoSuchElementException;

public class RandomizedQueue<Item> implements Iterable<Item> {
    private int n;
    private Node first;
    private Node last;
    private class Node {
        private Item item;
        private Node next;
        private Node prev;
    }
    public RandomizedQueue() {
        n = 0;
        first = null;
        last  = null;
    }
    public boolean isEmpty() {
        return n == 0
    }
    public int size() {
        return n;
    }
    public void enqueue(Item item) {
        if (item == null) throw new NullPointerException();
        Node node = new Node();
        node.next = null;
        if (isEmpty()) {
            node.prev = null;
            first = node;
            last = node;
        } else {
            last.next = node;
            node.prev = last;
            last = node;
        }
        n++;
    }
    public Item dequeue() {
        if (isEmpty()) throw new NoSuchElementException();
        n--;
        Node ret = first;
        if (isEmpty()) {
            first = null;
            last  = null;
        } else {
            first = first.next;
            first.prev = null;
        }
        return ret.item;
    }
    public Item sample() {
        if (isEmpty()) throw new NoSuchElementException();
    }
    public Iterator<Item> iterator();
}
